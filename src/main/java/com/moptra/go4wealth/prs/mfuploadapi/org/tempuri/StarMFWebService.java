package com.moptra.go4wealth.prs.mfuploadapi.org.tempuri;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import com.moptra.go4wealth.prs.mfuploadapi.com.bseindia.bsestarmfdemo._2016._01.IStarMFWebService;

import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.5
 * 2018-07-24T18:47:26.057+05:30
 * Generated source version: 2.7.5
 * 
 */
@WebServiceClient(name = "StarMFWebService", 
                  wsdlLocation = "classpath:wsdl/StarMFWebService.xml",
                  targetNamespace = "http://tempuri.org/") 
public class StarMFWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "StarMFWebService");
    public final static QName WSHttpBindingIStarMFWebService1 = new QName("http://tempuri.org/", "WSHttpBinding_IStarMFWebService1");
    public final static QName WSHttpBindingIStarMFWebService = new QName("http://tempuri.org/", "WSHttpBinding_IStarMFWebService");
    static {
        URL url = StarMFWebService.class.getClassLoader().getResource("wsdl/StarMFWebService.xml");
        if (url == null) {
            java.util.logging.Logger.getLogger(StarMFWebService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "classpath:wsdl/StarMFWebService.xml");
        }       
        WSDL_LOCATION = url;   
    }

    public StarMFWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public StarMFWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public StarMFWebService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public StarMFWebService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public StarMFWebService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public StarMFWebService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns IStarMFWebService
     */
    @WebEndpoint(name = "WSHttpBinding_IStarMFWebService1")
    public IStarMFWebService getWSHttpBindingIStarMFWebService1() {
        return super.getPort(WSHttpBindingIStarMFWebService1, IStarMFWebService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IStarMFWebService
     */
    @WebEndpoint(name = "WSHttpBinding_IStarMFWebService1")
    public IStarMFWebService getWSHttpBindingIStarMFWebService1(WebServiceFeature... features) {
        return super.getPort(WSHttpBindingIStarMFWebService1, IStarMFWebService.class, features);
    }
    /**
     *
     * @return
     *     returns IStarMFWebService
     */
    @WebEndpoint(name = "WSHttpBinding_IStarMFWebService")
    public IStarMFWebService getWSHttpBindingIStarMFWebService() {
        return super.getPort(WSHttpBindingIStarMFWebService, IStarMFWebService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IStarMFWebService
     */
    @WebEndpoint(name = "WSHttpBinding_IStarMFWebService")
    public IStarMFWebService getWSHttpBindingIStarMFWebService(WebServiceFeature... features) {
        return super.getPort(WSHttpBindingIStarMFWebService, IStarMFWebService.class, features);
    }

}
